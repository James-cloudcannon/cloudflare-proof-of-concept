---
import Layout from "./Layout.astro";
import RelatedPosts from "../components/blog/RelatedPosts.astro";
import SocialButtons from "../components/blog/SocialButtons.astro";
import CloudflareTV from "../components/blog/CloudflareTV.astro";
import AuthorSocials from "../components/blog/AuthorSocials.astro";
import { getCollection } from "astro:content";
import type { MarkdownLayoutProps } from "astro";

type Props =
  | {
      title: string;
      date: string;
      image: string;
      image_alt: string;
      author: Array<{ name: string; avatar: string; social?: string }>;
      body: string;
      tags: string[];
    }
  | MarkdownLayoutProps<{
      title: string;
      date: string;
      image: string;
      image_alt: string;
      author: Array<{ name: string; avatar: string; social?: string }>;
      tags: string[];
    }>;

const props = Astro.props.frontmatter ?? Astro.props;
const { title, date, author, tags } = props;
const content = Astro.props.body ?? Astro.props.rawContent();
const wordCount = content.split(" ").length;
const readingTime = Math.floor(wordCount / 183);
const dateObj = new Date(date);
const slug = Astro.url.pathname.replace("/blog/", "");

const formattedDate = dateObj.toLocaleDateString("en-US", {
  year: "numeric",
  month: "2-digit",
  day: "2-digit",
});

const posts = await getCollection("blog");
---

<Layout {...props}>
  <progress class="reading-progress" value="0" max="100" aria-label="Reading progress"></progress>
  <main class="blog-post">
    <article class="blog-post__article">
      <h1 class="blog-post__title">{title}</h1>
      <li class="blog-post__date">
        <p>{formattedDate}</p>
      </li>
      <ul class="blog-post__author">
        {author.map((authorName) => (
          <li class="blog-post__author__item">
            <a
              href={`/author/${authorName.name.toLowerCase().replace(" ", "-")}`}
              class="blog-post__author__avatar"
            >
              <img
                src={authorName.avatar}
                alt={authorName.name}
                width="62"
                height="62"
              />
            </a>
            <div class="blog-post__author__name">
              <a
                href={`/author/${authorName.name.toLowerCase().replace(" ", "-")}`}
                class="blog-post__author__name__link"
              >
                {authorName.name}
              </a>
            </div>
          </li>
        ))}
      </ul>
      <div class="blog-post__size-wrapper">
        <p>{readingTime}<span> min read</span></p>
      </div>
      <div class="blog-post__content post-content">
        <slot />
      </div>
    </article>
    <SocialButtons title={title} slug={slug} />
    <CloudflareTV />
    <section class="blog-post__tags">
      {tags.map((tag, i) => (
        <a href={`/tags/${tag.toLowerCase()}`}>
          {tag[0].toUpperCase() + tag.slice(1)}
        </a>
      ))}
    </section>
    <AuthorSocials author={author} />
    {(() => {
      const relatedPosts = posts
        .filter(
          (post) =>
            post.slug !== slug &&
            post.data.tags.some((tag) => tags.includes(tag))
        )
        .map((post) => {
          return {
            ...post,
            data: {
              ...post.data,
              featured: false,
            },
          };
        })
        .filter((post, index, self) => 
          index === self.findIndex((p) => p.slug === post.slug)
        );

      return (
        relatedPosts.length > 0 && (
          <section class="blog-post__recent-posts">
            <h2 class="blog-post__recent-title">Recent Posts</h2>
            <div class="blog-post__recent-grid">
              {relatedPosts.slice(0, 4).map((post) => (
                <RelatedPosts post={post} />
              ))}
            </div>
          </section>
        )
      );
    })()}
  </main>
</Layout>


<script>
  window.addEventListener('scroll', () => {
    const scrollable = document.documentElement.scrollHeight - window.innerHeight;
    const scrolled = window.scrollY;
    const progress = (scrolled / scrollable) * 100;
    document.querySelector('.reading-progress').value = progress;
  });
</script>

<style>
  .reading-progress {
    position: fixed;
    top: 0;
    z-index: 999;
    width: 100%;
    height: 5px;
    background: #c5d2d9;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
}
progress::-webkit-progress-value {
  background-color: blue;
}
</style>