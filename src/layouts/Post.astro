---
import Layout from "./Layout.astro";
import RelatedPosts from "../components/blog/related-posts";
import { getCollection } from "astro:content";
import type { MarkdownLayoutProps } from "astro";

type Props =
  | {
      title: string;
      date: string;
      image: string;
      image_alt: string;
      author: Array<{ name: string; avatar: string; social?: string }>;
      body: string;
      tags: string[];
    }
  | MarkdownLayoutProps<{
      title: string;
      date: string;
      image: string;
      image_alt: string;
      author: Array<{ name: string; avatar: string; social?: string }>;
      tags: string[];
    }>;

const props = Astro.props.frontmatter ?? Astro.props;
const { title, date, image, image_alt, author, tags } = props;
const content = Astro.props.body ?? Astro.props.rawContent();
const wordCount = content.split(" ").length;
const readingTime = Math.floor(wordCount / 183);
const dateObj = new Date(date);
const slug = Astro.url.pathname.replace("/blog/", "");

const formattedDate = dateObj.toLocaleDateString("en-US", {
  year: "numeric",
  month: "2-digit",
  day: "2-digit",
});

const posts = await getCollection("blog");

const relatedPosts = posts
  .filter(
    (post) =>
      post.slug !== slug && post.data.tags.some((tag) => tags.includes(tag))
  )
  .map((post) => {
    post.data.featured = false;
    return post;
  });
---

<Layout {...props}>
  <main class="blog-post">
    <article class="blog-post__article">
      <h1 class="blog-post__title">{title}</h1>
      <li class="blog-post__date">
        <p>{formattedDate}</p>
      </li>
      <ul class="blog-post__author">
        {
          author.map((authorName) => (
            <li class="blog-post__author__item" key={authorName.name}>
              <a
                href={`/author/${authorName.name.toLowerCase().replace(" ", "-")}`}
                class="blog-post__author__avatar"
              >
                <img
                  src={authorName.avatar}
                  alt={authorName.name}
                  width="62"
                  height="62"
                />
              </a>
              <div class="blog-post__author__name">
                <a
                  href={`/author/${authorName.name.toLowerCase().replace(" ", "-")}`}
                  class="blog-post__author__name__link"
                >
                  {authorName.name}
                </a>
              </div>
            </li>
          ))
        }
      </ul>
      <div class="blog-post__size-wrapper">
        <p>{readingTime}<span> min read</span></p>
      </div>
      <div class="blog-post__content post-content">
        <slot />
      </div>
    </article>
    <div class="blog-post__social-buttons" id="social-buttons">
      <div class="blog-post__social-buttons__wrapper">
        <a
          id="social-button-hn"
          title="Discuss on Hacker News"
          href="https://news.ycombinator.com/submitlink?u=https://blog.cloudflare.com/using-fortran-on-cloudflare-workers"
          target="_blank"
          rel="noreferrer"
          class="blog-post__social-buttons__wrapper__button"
          style="background-color: rgb(0, 85, 220);"
        >
          <svg
            version="1.1"
            id="Layer_1"
            xmlns="http://www.w3.org/2000/svg"
            x="0px"
            y="0px"
            viewBox="0 0 512 512"
            class="mr2"
          >
            <g>
              <path
                d="M31,31v450h450V31H31z M270.1,287.6v94.9h-28.1v-94.9L165,143.5h31.9L256,254.3l59.1-110.8H347
                C347,143.5,270.1,287.6,270.1,287.6z"
              ></path>
            </g>
          </svg>
          <span class="blog-post__social-buttons__wrapper__button__text"
            >Discuss on Hacker News</span
          >
        </a>
      </div>
    </div>
    <iframe
      sandbox="allow-scripts allow-popups"
      title="cloudflare-tv-live-link"
      id="cloudflare-tv-embed"
      src="https://cloudflare.tv/embed/live.html"
      loading="lazy"></iframe>
    <section class="blog-post__tags">
      {
        tags.map((tag, i) => (
          <a href={`/tags/${tag.toLowerCase()}`} key={i}>
            {tag[0].toUpperCase() + tag.slice(1)}
          </a>
        ))
      }
    </section>
    <section class="blog-post__author-socials">
      <div class="blog-post__author-socials__wrapper">
        <div class="blog-post__author-socials__wrapper__headline">
          <p>Follow on X</p>
        </div>
        {
          author
            .filter((authorName) => authorName.social)
            .map((authorName) => (
              <div
                class="blog-post__author-socials__wrapper__socials"
                key={authorName.name}
              >
                {authorName.name}
                <span class="blog-post__author-socials__wrapper__socials__seperator">
                  |
                </span>
                <a
                  href={`https://twitter.com/${authorName.social}`}
                  class="blog-post__author-socials__wrapper__socials__link"
                >
                  {authorName.social}
                </a>
              </div>
            ))
        }
        <div class="blog-post__author-socials__wrapper__socials">
          <span>Cloudflare</span>
          <span class="blog-post__author-socials__wrapper__socials__seperator"
            >|</span
          >
          <a
            href="https://twitter.com/@cloudflare"
            class="blog-post__author-socials__wrapper__socials__link"
          >
            @cloudflare
          </a>
        </div>
      </div>
    </section>

    {
      relatedPosts.length > 0 && (
        <section class="blog-post__recent-posts">
          <h2 class="blog-post__recent-title">Recent Posts</h2>
          <div class="blog-post__recent-grid">
            {relatedPosts.slice(0, 4).map((post) => (
              <RelatedPosts post={post} />
            ))}
          </div>
        </section>
      )
    }
  </main>
</Layout>
